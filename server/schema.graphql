input TutorInput {
  username: String,
  gender: String,
  courseType:[String],
  courses:[String],
  price:[String],
  availability: [String],
  level: String,
  degree: String,
  completedLessons: Int,
  numReviews: Int,
  stars: Float,
  intro: String
}

type Tutor {
  username: String,
  gender: String,
  courseType:[String],
  courses:[String],
  price:[String],
  availability: [String],
  level: String,
  degree: String,
  completedLessons: Int,
  numReviews: Int,
  stars: Float,
  intro: String
}

type Building { 
  name: String,
  Date: String,
  username: String
}

type Positive {
  username: String,
  name: String,
  Date: String,
  trace: [String]
}
type User {
  _id: ID!
  id: Int!
  username: String
  password: String
  name: String
  type: [String]
  dorm: String
  courses: [String]
}

input NewUserInput {
  id: Int
  username: String
  password: String
  name: String
  type: [String]
  dorm: String
  courses: [String]

}

input UserInput {
  username: String
  password: String
}

type Health {
  _id: ID!
  username: String
  Date: String
  temperature: String
  status: String
  covid: Int
  symptoms: [String]
}

input HealthInput {
  username: String
  temperature: String
  covid: Int
  symptoms: [String]
}

type Entry {
  username: String
  Datetime: String
  type: Int
  fromwhere: Int
  residence: String
  placesPassed: String
}

input EntryInput {
  username: String
  Datetime: String
  type: Int
  fromwhere: Int
  residence: String
  placesPassed: String
}

type Review {
  date: String
  tutorName: String
  studentName: String
  stars: Float
  content: String
}

type Query {
  TutorLogin(tutor: UserInput): [Tutor]
  AllUsers: [User]
  Building(date: String): [Building]
  Positive(date: String): [Positive]
  User(user: UserInput!): [User]
  about: String
  Test(id: Int):String
  Health(username: String!): Health
  Entry(username: String!): [Entry]
  Tutors(tutorInput: TutorInput):[Tutor]
  FindTutor(username: String!): Tutor
  Reviews(username: String!): [Review]
}

type Mutation {
  TutorAdd(tutor: TutorInput): [Tutor]
  UserDelete(username: String): Int
  UserAdd(user: NewUserInput): [User]
  HealthAdd(health: HealthInput!): Health
  EntryAdd(entry: EntryInput!): Entry
}